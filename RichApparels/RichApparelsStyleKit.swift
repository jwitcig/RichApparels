//
//  RichApparelsStyleKit.swift
//  Rich Apparels
//
//  Created by Jonah Witcig on 7/26/17.
//  Copyright Â© 2017 JwitApps. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class RichApparelsStyleKit : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawProduct(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 552, height: 565), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 552, height: 565), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 552, y: resizedFrame.height / 565)


        //// Color Declarations
        let gradientColor = UIColor(red: 0.648, green: 0.648, blue: 0.648, alpha: 1.000)

        //// Rectangle 2 Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 8, y: 41, width: 512, height: 512), cornerRadius: 66)
        gradientColor.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Group
        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 29, y: 10, width: 512, height: 512), cornerRadius: 72)
        UIColor.white.setFill()
        rectangle3Path.fill()
        UIColor.black.setStroke()
        rectangle3Path.lineWidth = 8
        rectangle3Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawLinkArrow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 37, height: 51), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 37, height: 51), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 37, y: resizedFrame.height / 51)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 5, y: 5))
        bezierPath.addLine(to: CGPoint(x: 30, y: 25))
        bezierPath.addLine(to: CGPoint(x: 5, y: 45))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 8
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 5, y: 5))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 25))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 45))
        UIColor.white.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawShop(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 702, height: 84), resizing: ResizingBehavior = .aspectFit, buttonTitle: String = "Shop") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 702, height: 84), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 702, y: resizedFrame.height / 84)


        //// Text Drawing
        let textRect = CGRect(x: 0, y: 0, width: 702, height: 84)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            NSFontAttributeName: UIFont(name: "Lato-Bold", size: 72)!,
            NSForegroundColorAttributeName: UIColor.black,
            NSParagraphStyleAttributeName: textStyle,
        ]

        let textTextHeight: CGFloat = buttonTitle.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        buttonTitle.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawImage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 388, height: 140), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 388, height: 140), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 388, y: resizedFrame.height / 140)



        //// Image Declarations
        let richyFromRichApparels = UIImage(named: "richyFromRichApparels.jpg")!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -82, y: -54, width: 578, height: 246))
        context.saveGState()
        rectanglePath.addClip()
        context.translateBy(x: -82, y: -54)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -richyFromRichApparels.size.height)
        context.draw(richyFromRichApparels.cgImage!, in: CGRect(x: 0, y: 0, width: richyFromRichApparels.size.width, height: richyFromRichApparels.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRoosevelt(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 716, height: 342), resizing: ResizingBehavior = .aspectFit, rooseveltIcon: UIImage) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 716, height: 342), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 716, y: resizedFrame.height / 342)


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 199, y: 14, width: 318, height: 318))
        UIColor.black.setFill()
        oval2Path.fill()


        //// Image Circle Drawing
        let imageCirclePath = UIBezierPath(ovalIn: CGRect(x: 208, y: 23, width: 300, height: 300))
        context.saveGState()
        imageCirclePath.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(rooseveltIcon.cgImage!, in: CGRect(x: 113, y: 62, width: rooseveltIcon.size.width, height: rooseveltIcon.size.height), byTiling: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSend(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 184, height: 165), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 184, height: 165), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 184, y: resizedFrame.height / 165)


        //// Color Declarations
        let color2 = UIColor(red: 0.000, green: 0.500, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11.5, y: 84.5))
        bezierPath.addLine(to: CGPoint(x: 172.5, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 119.5, y: 152.5))
        bezierPath.addLine(to: CGPoint(x: 81.5, y: 123.5))
        bezierPath.addLine(to: CGPoint(x: 58.5, y: 144.5))
        bezierPath.addLine(to: CGPoint(x: 47.5, y: 101.5))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 84.5))
        bezierPath.close()
        color2.setFill()
        bezierPath.fill()
        UIColor.black.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 66, y: 110))
        bezier3Path.addLine(to: CGPoint(x: 62.5, y: 133.5))
        bezier3Path.addLine(to: CGPoint(x: 53, y: 101))
        bezier3Path.addLine(to: CGPoint(x: 152.5, y: 30.5))
        bezier3Path.addLine(to: CGPoint(x: 66, y: 110))
        bezier3Path.close()
        UIColor.white.setFill()
        bezier3Path.fill()
        UIColor.black.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSendCircleAnimation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 238, height: 237), resizing: ResizingBehavior = .aspectFit, sendCompletionFraction: CGFloat = 0.913) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 238, height: 237), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 238, y: resizedFrame.height / 237)


        //// Color Declarations
        let color2 = UIColor(red: 0.000, green: 0.500, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let sendCompletionAngle: CGFloat = sendCompletionFraction < 0.25 ? 90 - sendCompletionFraction * 360 : -270 * (sendCompletionFraction - 0.25) / 0.75

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Oval Drawing
        let ovalRect = CGRect(x: 6.5, y: 5.5, width: 220, height: 220)
        let ovalPath = UIBezierPath()
        ovalPath.addArc(withCenter: CGPoint(x: ovalRect.midX, y: ovalRect.midY), radius: ovalRect.width / 2, startAngle: -90 * CGFloat.pi/180, endAngle: -sendCompletionAngle * CGFloat.pi/180, clockwise: true)

        color2.setStroke()
        ovalPath.lineWidth = 7
        ovalPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSendCircleAnimationCombined(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 238, height: 237), resizing: ResizingBehavior = .aspectFit, sendCompletionFraction: CGFloat = 0.913) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 238, height: 237), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 238, y: resizedFrame.height / 237)


        //// Color Declarations
        let color2 = UIColor(red: 0.000, green: 0.500, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let sendCompletionAngle: CGFloat = sendCompletionFraction < 0.25 ? 90 - sendCompletionFraction * 360 : -270 * (sendCompletionFraction - 0.25) / 0.75

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Oval Drawing
        let ovalRect = CGRect(x: 6.5, y: 5.5, width: 220, height: 220)
        let ovalPath = UIBezierPath()
        ovalPath.addArc(withCenter: CGPoint(x: ovalRect.midX, y: ovalRect.midY), radius: ovalRect.width / 2, startAngle: -90 * CGFloat.pi/180, endAngle: -sendCompletionAngle * CGFloat.pi/180, clockwise: true)

        color2.setStroke()
        ovalPath.lineWidth = 7
        ovalPath.stroke()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 14, y: 41, width: 184, height: 165)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        RichApparelsStyleKit.drawSend(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawFAQ(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 120)


        //// Text Drawing
        let textPath = UIBezierPath()
        textPath.move(to: CGPoint(x: 43.73, y: 98))
        textPath.addLine(to: CGPoint(x: 43.73, y: 67.18))
        textPath.addLine(to: CGPoint(x: 75.25, y: 67.18))
        textPath.addLine(to: CGPoint(x: 75.25, y: 59.29))
        textPath.addLine(to: CGPoint(x: 43.73, y: 59.29))
        textPath.addLine(to: CGPoint(x: 43.73, y: 34.83))
        textPath.addLine(to: CGPoint(x: 78.06, y: 34.83))
        textPath.addLine(to: CGPoint(x: 78.06, y: 26.84))
        textPath.addLine(to: CGPoint(x: 34.86, y: 26.84))
        textPath.addLine(to: CGPoint(x: 34.86, y: 98))
        textPath.addLine(to: CGPoint(x: 39, y: 113))
        textPath.addLine(to: CGPoint(x: 43.73, y: 98))
        textPath.close()
        textPath.move(to: CGPoint(x: 129.49, y: 98))
        textPath.addLine(to: CGPoint(x: 138.81, y: 98))
        textPath.addLine(to: CGPoint(x: 112.58, y: 26.84))
        textPath.addLine(to: CGPoint(x: 108, y: 14))
        textPath.addLine(to: CGPoint(x: 103.8, y: 26.84))
        textPath.addLine(to: CGPoint(x: 77.56, y: 98))
        textPath.addLine(to: CGPoint(x: 86.88, y: 98))
        textPath.addLine(to: CGPoint(x: 94.03, y: 77.63))
        textPath.addLine(to: CGPoint(x: 122.34, y: 77.63))
        textPath.addCurve(to: CGPoint(x: 123.43, y: 80.71), controlPoint1: CGPoint(x: 122.34, y: 77.63), controlPoint2: CGPoint(x: 122.7, y: 78.66))
        textPath.addCurve(to: CGPoint(x: 125.92, y: 87.82), controlPoint1: CGPoint(x: 124.15, y: 82.77), controlPoint2: CGPoint(x: 124.98, y: 85.14))
        textPath.addCurve(to: CGPoint(x: 128.41, y: 94.92), controlPoint1: CGPoint(x: 126.85, y: 90.5), controlPoint2: CGPoint(x: 127.69, y: 92.86))
        textPath.addCurve(to: CGPoint(x: 129.49, y: 98), controlPoint1: CGPoint(x: 129.13, y: 96.97), controlPoint2: CGPoint(x: 129.49, y: 98))
        textPath.close()
        textPath.move(to: CGPoint(x: 108.04, y: 37.64))
        textPath.addLine(to: CGPoint(x: 108.34, y: 37.64))
        textPath.addLine(to: CGPoint(x: 119.73, y: 70.09))
        textPath.addLine(to: CGPoint(x: 96.65, y: 70.09))
        textPath.addCurve(to: CGPoint(x: 97.81, y: 66.81), controlPoint1: CGPoint(x: 96.65, y: 70.09), controlPoint2: CGPoint(x: 97.03, y: 68.99))
        textPath.addCurve(to: CGPoint(x: 100.67, y: 58.69), controlPoint1: CGPoint(x: 98.58, y: 64.62), controlPoint2: CGPoint(x: 99.53, y: 61.92))
        textPath.addCurve(to: CGPoint(x: 104.05, y: 49.03), controlPoint1: CGPoint(x: 101.8, y: 55.47), controlPoint2: CGPoint(x: 102.93, y: 52.25))
        textPath.addCurve(to: CGPoint(x: 106.88, y: 40.92), controlPoint1: CGPoint(x: 105.16, y: 45.81), controlPoint2: CGPoint(x: 106.11, y: 43.1))
        textPath.addCurve(to: CGPoint(x: 108.04, y: 37.64), controlPoint1: CGPoint(x: 107.65, y: 38.73), controlPoint2: CGPoint(x: 108.04, y: 37.64))
        textPath.close()
        textPath.move(to: CGPoint(x: 202, y: 103))
        textPath.addLine(to: CGPoint(x: 194.89, y: 93.07))
        textPath.addCurve(to: CGPoint(x: 207.81, y: 62.44), controlPoint1: CGPoint(x: 203.5, y: 86.56), controlPoint2: CGPoint(x: 207.81, y: 76.35))
        textPath.addCurve(to: CGPoint(x: 198.98, y: 35.57), controlPoint1: CGPoint(x: 207.81, y: 51.13), controlPoint2: CGPoint(x: 204.87, y: 42.17))
        textPath.addCurve(to: CGPoint(x: 175.01, y: 25.65), controlPoint1: CGPoint(x: 193.1, y: 28.96), controlPoint2: CGPoint(x: 185.11, y: 25.65))
        textPath.addCurve(to: CGPoint(x: 151.04, y: 35.57), controlPoint1: CGPoint(x: 164.92, y: 25.65), controlPoint2: CGPoint(x: 156.93, y: 28.96))
        textPath.addCurve(to: CGPoint(x: 142.22, y: 62.44), controlPoint1: CGPoint(x: 145.16, y: 42.17), controlPoint2: CGPoint(x: 142.22, y: 51.13))
        textPath.addCurve(to: CGPoint(x: 151.04, y: 89.27), controlPoint1: CGPoint(x: 142.22, y: 73.72), controlPoint2: CGPoint(x: 145.16, y: 82.66))
        textPath.addCurve(to: CGPoint(x: 175.01, y: 99.18), controlPoint1: CGPoint(x: 156.93, y: 95.88), controlPoint2: CGPoint(x: 164.92, y: 99.18))
        textPath.addCurve(to: CGPoint(x: 187.74, y: 96.96), controlPoint1: CGPoint(x: 179.71, y: 99.18), controlPoint2: CGPoint(x: 183.96, y: 98.44))
        textPath.addLine(to: CGPoint(x: 194.34, y: 106.04))
        textPath.addLine(to: CGPoint(x: 202, y: 110))
        textPath.addLine(to: CGPoint(x: 202, y: 103))
        textPath.close()
        textPath.move(to: CGPoint(x: 175.01, y: 91))
        textPath.addCurve(to: CGPoint(x: 157.73, y: 83.28), controlPoint1: CGPoint(x: 167.75, y: 91), controlPoint2: CGPoint(x: 161.98, y: 88.42))
        textPath.addCurve(to: CGPoint(x: 151.34, y: 62.44), controlPoint1: CGPoint(x: 153.47, y: 78.13), controlPoint2: CGPoint(x: 151.34, y: 71.19))
        textPath.addCurve(to: CGPoint(x: 157.73, y: 41.56), controlPoint1: CGPoint(x: 151.34, y: 53.66), controlPoint2: CGPoint(x: 153.47, y: 46.7))
        textPath.addCurve(to: CGPoint(x: 175.01, y: 33.84), controlPoint1: CGPoint(x: 161.98, y: 36.41), controlPoint2: CGPoint(x: 167.75, y: 33.84))
        textPath.addCurve(to: CGPoint(x: 192.3, y: 41.56), controlPoint1: CGPoint(x: 182.28, y: 33.84), controlPoint2: CGPoint(x: 188.04, y: 36.41))
        textPath.addCurve(to: CGPoint(x: 198.68, y: 62.44), controlPoint1: CGPoint(x: 196.56, y: 46.7), controlPoint2: CGPoint(x: 198.68, y: 53.66))
        textPath.addCurve(to: CGPoint(x: 189.71, y: 85.92), controlPoint1: CGPoint(x: 198.68, y: 73.03), controlPoint2: CGPoint(x: 195.69, y: 80.85))
        textPath.addLine(to: CGPoint(x: 183.64, y: 77.63))
        textPath.addLine(to: CGPoint(x: 176, y: 74))
        textPath.addLine(to: CGPoint(x: 176, y: 81))
        textPath.addLine(to: CGPoint(x: 182.56, y: 89.86))
        textPath.addCurve(to: CGPoint(x: 175.01, y: 91), controlPoint1: CGPoint(x: 180.19, y: 90.62), controlPoint2: CGPoint(x: 177.68, y: 91))
        textPath.close()
        UIColor.black.setFill()
        textPath.fill()
        
        context.restoreGState()

    }




    @objc(RichApparelsStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
